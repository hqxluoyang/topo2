{
    "project": {
        "name": "QTopo",
        "description": "<h2>QTopo</h2> <p>一种topo图绘制工具，基于JTopo封装。遗憾的是JTopo已经2年多没更新了!!</p><h5>入口请参阅<a href=\"./classes/QTopo.html\">QTopo</a></h5><p>使用说明: <h5>1.引入js和css文件</h5> <h5>2.调用QTopo.init函数(<a href=\"./classes/QTopo.html\">api</a>),传入一个设置了高宽的dom元素用以生成topo图，返回topo对象</h5><h5>3.topo对象(<a href=\"./classes/QTopo.instance.html\">instance</a>)调用函数setOption绘制topo图</h5><h5>4.var json=topo.toJson()导出绘制参数用以保存</h5><h5>5.下次使用可直接用作QTopo初始化参数以及绘图数据,如var topo=QTopo.init(dom,json.init),topo.setOption(json.option)即可还原topo图</h5></ht></p>",
        "version": "1.0",
        "url": "https://github.com/hai3460377/QTopo",
        "logo": "./logo.png",
        "navs": [
            {
                "name": "教程",
                "url": "./index.html"
            },
            {
                "name": "下载",
                "url": "./download/qtopo.zip"
            }
        ]
    },
    "files": {
        "develop\\component\\rightMenu\\repertory.js": {
            "name": "develop\\component\\rightMenu\\repertory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\rightMenu\\rightMenu.js": {
            "name": "develop\\component\\rightMenu\\rightMenu.js",
            "modules": {},
            "classes": {
                "rightMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\toolBar\\toolBar.js": {
            "name": "develop\\component\\toolBar\\toolBar.js",
            "modules": {},
            "classes": {
                "toolBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\confirm.js": {
            "name": "develop\\component\\windows\\tools\\confirm.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\imageSelect.js": {
            "name": "develop\\component\\windows\\tools\\imageSelect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\loading.js": {
            "name": "develop\\component\\windows\\tools\\loading.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\progress.js": {
            "name": "develop\\component\\windows\\tools\\progress.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\styleSelect.js": {
            "name": "develop\\component\\windows\\tools\\styleSelect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\tips.js": {
            "name": "develop\\component\\windows\\tools\\tips.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\tools\\view.js": {
            "name": "develop\\component\\windows\\tools\\view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\util.js": {
            "name": "develop\\component\\windows\\util.js",
            "modules": {},
            "classes": {
                "QTopo.windowUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\windows\\windows.js": {
            "name": "develop\\component\\windows\\windows.js",
            "modules": {
                "component": 1
            },
            "classes": {
                "windows": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\component\\component.js": {
            "name": "develop\\component\\component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\container\\Container.js": {
            "name": "develop\\core\\element\\container\\Container.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "[C] Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\container\\Group.js": {
            "name": "develop\\core\\element\\container\\Group.js",
            "modules": {},
            "classes": {
                "Group": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\line\\Direct.js": {
            "name": "develop\\core\\element\\line\\Direct.js",
            "modules": {},
            "classes": {
                "DirectLine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\line\\Line.js": {
            "name": "develop\\core\\element\\line\\Line.js",
            "modules": {},
            "classes": {
                "[LE] Line": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\link\\Curve.js": {
            "name": "develop\\core\\element\\link\\Curve.js",
            "modules": {},
            "classes": {
                "CurveLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\link\\Direct.js": {
            "name": "develop\\core\\element\\link\\Direct.js",
            "modules": {},
            "classes": {
                "DirectLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\link\\Flexional.js": {
            "name": "develop\\core\\element\\link\\Flexional.js",
            "modules": {},
            "classes": {
                "FlexionalLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\link\\Fold.js": {
            "name": "develop\\core\\element\\link\\Fold.js",
            "modules": {},
            "classes": {
                "FoldLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\link\\Link.js": {
            "name": "develop\\core\\element\\link\\Link.js",
            "modules": {},
            "classes": {
                "[L] Link": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\node\\Image.js": {
            "name": "develop\\core\\element\\node\\Image.js",
            "modules": {},
            "classes": {
                "ImageNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\node\\Node.js": {
            "name": "develop\\core\\element\\node\\Node.js",
            "modules": {},
            "classes": {
                "[N] Node": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\node\\Shape.js": {
            "name": "develop\\core\\element\\node\\Shape.js",
            "modules": {},
            "classes": {
                "ShapeNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\node\\Text.js": {
            "name": "develop\\core\\element\\node\\Text.js",
            "modules": {},
            "classes": {
                "initTextNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\element\\Element.js": {
            "name": "develop\\core\\element\\Element.js",
            "modules": {},
            "classes": {
                "[E] Element": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\jtopo\\stage\\event.js": {
            "name": "develop\\core\\jtopo\\stage\\event.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\jtopo\\tools\\api.js": {
            "name": "develop\\core\\jtopo\\tools\\api.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\jtopo\\tools\\layout.js": {
            "name": "develop\\core\\jtopo\\tools\\layout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\jtopo\\main.js": {
            "name": "develop\\core\\jtopo\\main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\Scene.js": {
            "name": "develop\\core\\Scene.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\core\\events.js": {
            "name": "develop\\core\\events.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\constant.js": {
            "name": "develop\\constant.js",
            "modules": {
                "QTopo": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "develop\\main.js": {
            "name": "develop\\main.js",
            "modules": {},
            "classes": {
                "QTopo": 1,
                "QTopo.instance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "develop\\util.js": {
            "name": "develop\\util.js",
            "modules": {},
            "classes": {
                "QTopo.util": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "component": {
            "name": "component",
            "submodules": {},
            "classes": {
                "rightMenu": 1,
                "toolBar": 1,
                "windows": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "develop\\component\\windows\\windows.js",
            "line": 4
        },
        "QTopo": {
            "name": "QTopo",
            "submodules": {},
            "classes": {
                "QTopo.windowUtil": 1,
                "QTopo": 1,
                "QTopo.instance": 1,
                "QTopo.util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "develop\\util.js",
            "line": 4
        },
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "[C] Container": 1,
                "Group": 1,
                "DirectLine": 1,
                "[LE] Line": 1,
                "CurveLink": 1,
                "DirectLink": 1,
                "FlexionalLink": 1,
                "FoldLink": 1,
                "[L] Link": 1,
                "ImageNode": 1,
                "[N] Node": 1,
                "ShapeNode": 1,
                "initTextNode": 1,
                "[E] Element": 1,
                "Scene": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "develop\\core\\events.js",
            "line": 4
        }
    },
    "classes": {
        "rightMenu": {
            "name": "rightMenu",
            "shortname": "rightMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component",
            "namespace": "",
            "file": "develop\\component\\rightMenu\\rightMenu.js",
            "line": 4,
            "description": "右键菜单模块",
            "static": 1
        },
        "toolBar": {
            "name": "toolBar",
            "shortname": "toolBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component",
            "namespace": "",
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 4,
            "description": "工具条模块",
            "static": 1
        },
        "windows": {
            "name": "windows",
            "shortname": "windows",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component",
            "namespace": "",
            "file": "develop\\component\\windows\\windows.js",
            "line": 4,
            "description": "窗口管理,所有窗口统一用instance.open(type,config)接口打开,type和窗口名对应指示打开哪种窗口，根据config做配置,",
            "static": 1
        },
        "QTopo.windowUtil": {
            "name": "QTopo.windowUtil",
            "shortname": "QTopo.windowUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "QTopo",
            "namespace": "",
            "file": "develop\\component\\windows\\util.js",
            "line": 4,
            "description": "组件包中的窗口管理模块的窗口工具包",
            "static": 1
        },
        "QTopo": {
            "name": "QTopo",
            "shortname": "QTopo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "QTopo",
            "namespace": "",
            "file": "develop\\main.js",
            "line": 9,
            "static": 1,
            "description": "主入口,window.QTopo"
        },
        "QTopo.instance": {
            "name": "QTopo.instance",
            "shortname": "QTopo.instance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "QTopo",
            "namespace": "",
            "file": "develop\\main.js",
            "line": 57,
            "static": 1,
            "description": "QTopo初始化的topo实例,QTopo.init后的返回对象，或是QTopo.instance数组内保存的对象"
        },
        "[C] Container": {
            "name": "[C] Container",
            "shortname": "[C] Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 4,
            "description": "容器基类,用以继承 [E]开头继承于Element,[C]开头为自身api",
            "is_constructor": 1,
            "extends": "[E] Element",
            "params": [
                {
                    "name": "jtopo",
                    "description": "元素核心的jtopo对象"
                }
            ]
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\container\\Group.js",
            "line": 4,
            "description": "图形节点",
            "is_constructor": 1,
            "extends": "[C] Container",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "DirectLine": {
            "name": "DirectLine",
            "shortname": "DirectLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\line\\Direct.js",
            "line": 4,
            "description": "图形节点",
            "is_constructor": 1,
            "extends": "[LE] Line",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "[LE] Line": {
            "name": "[LE] Line",
            "shortname": "[LE] Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 4,
            "description": "线段基类,用以继承 [E]开头继承于Element,[LE]开头为自身api",
            "is_constructor": 1,
            "extends": "[E] Element",
            "params": [
                {
                    "name": "jtopo",
                    "description": "元素核心的jtopo对象"
                }
            ]
        },
        "CurveLink": {
            "name": "CurveLink",
            "shortname": "CurveLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\link\\Curve.js",
            "line": 4,
            "description": "曲线链路",
            "is_constructor": 1,
            "extends": "[L] Link",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "DirectLink": {
            "name": "DirectLink",
            "shortname": "DirectLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\link\\Direct.js",
            "line": 4,
            "description": "直线链路",
            "is_constructor": 1,
            "extends": "[L] Link",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "FlexionalLink": {
            "name": "FlexionalLink",
            "shortname": "FlexionalLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\link\\Flexional.js",
            "line": 4,
            "description": "二次折线链路",
            "is_constructor": 1,
            "extends": "[L] Link",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "FoldLink": {
            "name": "FoldLink",
            "shortname": "FoldLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\link\\Fold.js",
            "line": 4,
            "description": "折线链路",
            "is_constructor": 1,
            "extends": "[L] Link",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "[L] Link": {
            "name": "[L] Link",
            "shortname": "[L] Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 4,
            "description": "链路基类,用以继承 [E]开头继承于Element,[L]开头为自身api",
            "is_constructor": 1,
            "extends": "[E] Element",
            "params": [
                {
                    "name": "jtopo",
                    "description": "元素核心的jtopo对象"
                }
            ]
        },
        "ImageNode": {
            "name": "ImageNode",
            "shortname": "ImageNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\node\\Image.js",
            "line": 4,
            "description": "图形节点",
            "is_constructor": 1,
            "extends": "[N] Node",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "[N] Node": {
            "name": "[N] Node",
            "shortname": "[N] Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 4,
            "description": "节点基类,用以继承 [E]开头继承于Element,[N]开头为自身api",
            "is_constructor": 1,
            "extends": "[E] Element",
            "params": [
                {
                    "name": "jtopo",
                    "description": "元素核心的jtopo对象"
                }
            ]
        },
        "ShapeNode": {
            "name": "ShapeNode",
            "shortname": "ShapeNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\node\\Shape.js",
            "line": 40,
            "description": "形状节点",
            "is_constructor": 1,
            "extends": "[N] Node",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "initTextNode": {
            "name": "initTextNode",
            "shortname": "initTextNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\node\\Text.js",
            "line": 4,
            "description": "文本节点",
            "is_constructor": 1,
            "extends": "[N] Node",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数，无参则按全局配置创建",
                    "optional": true
                }
            ]
        },
        "[E] Element": {
            "name": "[E] Element",
            "shortname": "[E] Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\element\\Element.js",
            "line": 5,
            "description": "元素基类,用以继承",
            "is_constructor": 1,
            "params": [
                {
                    "name": "jtopo",
                    "description": "元素核心的jtopo对象"
                }
            ]
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "develop\\core\\events.js",
            "line": 4,
            "description": "图层对象",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "绘图所在的canvas标签对象"
                },
                {
                    "name": "config",
                    "description": "图层的基本设置,参见attr属性"
                }
            ]
        },
        "QTopo.util": {
            "name": "QTopo.util",
            "shortname": "QTopo.util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "QTopo",
            "namespace": "",
            "file": "develop\\util.js",
            "line": 4,
            "description": "QTopo通用工具包",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 102,
            "description": "将目标打印到控制台",
            "itemtype": "property",
            "name": "Debug",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 126,
            "description": "根据元素类型自适应打开编辑窗口",
            "itemtype": "property",
            "name": "编辑",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 157,
            "description": "删除元素",
            "itemtype": "property",
            "name": "删除",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 186,
            "description": "将所有元素高亮",
            "itemtype": "property",
            "name": "取消高亮",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 201,
            "description": "元素的一般操作子菜单",
            "itemtype": "property",
            "name": "元素切换",
            "class": "rightMenu",
            "module": "component",
            "subprops": [
                {
                    "name": "层次切换",
                    "description": ""
                },
                {
                    "name": "相关高亮",
                    "description": ""
                }
            ]
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 211,
            "description": "元素的显示层级切换,首次切换成最高级，已到最高级的降至最低级",
            "itemtype": "property",
            "name": "层次切换",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 224,
            "description": "将与元素相关联的元素以及链路高亮，其他元素和链路透明度降低",
            "itemtype": "property",
            "name": "相关高亮",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 240,
            "description": "打开节点对应的创建窗口",
            "itemtype": "property",
            "name": "创建节点",
            "class": "rightMenu",
            "module": "component",
            "subprops": [
                {
                    "name": "图片节点",
                    "description": ""
                },
                {
                    "name": "文字节点",
                    "description": ""
                }
            ]
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 250,
            "description": "打开创建图形节点窗口",
            "itemtype": "property",
            "name": "图片节点",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 260,
            "description": "打开创建文本节点窗口",
            "itemtype": "property",
            "name": "文字节点",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 275,
            "description": "打开设置链路窗口,只有同时存在起点和终点设置时才开启窗口",
            "itemtype": "property",
            "name": "添加链路",
            "class": "rightMenu",
            "module": "component",
            "subprops": [
                {
                    "name": "设为起点",
                    "description": ""
                },
                {
                    "name": "设为终点",
                    "description": ""
                }
            ]
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 285,
            "description": "设置起点，窗口关闭后清空",
            "itemtype": "property",
            "name": "设为起点",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 296,
            "description": "设置终点，窗口关闭后清空",
            "itemtype": "property",
            "name": "设为终点",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 312,
            "description": "分组相关操作子菜单,",
            "itemtype": "property",
            "name": "分组操作",
            "class": "rightMenu",
            "module": "component",
            "subprops": [
                {
                    "name": "锁定",
                    "description": ""
                },
                {
                    "name": "加入分组",
                    "description": ""
                },
                {
                    "name": "移出分组",
                    "description": ""
                },
                {
                    "name": "创建分组",
                    "description": ""
                }
            ]
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 324,
            "description": "选定一个分组用以后续操作,用以加入分组操作",
            "itemtype": "property",
            "name": "锁定",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 337,
            "description": "为锁定的分组加入目标元素,",
            "itemtype": "property",
            "name": "加入分组",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 350,
            "description": "将目标元素移出所在分组,",
            "itemtype": "property",
            "name": "移出分组",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\repertory.js",
            "line": 363,
            "description": "当选中了2个或2个以上的节点时，出现该选项，打开创建分组窗口",
            "itemtype": "property",
            "name": "创建分组",
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\rightMenu.js",
            "line": 39,
            "description": "添加自定义右键菜单\n通过instance.setComponent函数添加",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "example": [
                "\n         instance.setComponent({\n             rightMenu:{\n                         执行过程中会传入当前实例对象，图层对象，右键菜单对象,其中右键菜单对象记录有触发的目标以及位置信息\n                     add:function (instance,scene, menu) {\n                                 return [\n                                          {\n                                                       name: \"刷新\",//菜单名称\n                                                       order: 3,   //可选,在配置了order函数时作为参数传入,用作菜单位置排序\n                                                       click: function () {\n                                                           //点击该菜单时的处理\n                                                           menu.target为当前触发菜单的元素\n                                                           menu.x\n                                                           menu.y 为当前触发菜单时鼠标在图层上的坐标\n                                                       },\n                                                       filter: function (target) {\n                                                           //返回值为boolean类型，根据返回值决定何时显示该菜单,传入的target为当前触发菜单的元素\n                                                           //该属性可不设置，不设置则默认为一直显示\n                                                           return QTopo.util.isScene(target);\n                                                       }\n                                                    },\n                                                    {  //嵌套菜单,菜单中有item属性时，则将菜单设为子菜单栏,子菜单同样可以设置点击事件和显示规则\n                                                       //当子菜单的成员菜单都不显示时，子菜单也不显示\n                                                       //可无限嵌套.\n                                                           name: \"添加\",\n                                                           order: 10,\n                                                           item: [\n                                                               {\n                                                                   name: \"网段\",\n                                                                   click: function () {\n                                                                       ...\n                                                                   },\n                                                                   filter:function(){\n                                                                       //若无返回值。。则是没通过过滤\n                                                                   }\n                                                               },\n                                                               {\n                                                                   name: \"设备\",\n                                                                   click: function () {\n                                                                       ...\n                                                                   }\n                                                               }\n                                                           ],\n                                                           filter: function (target) {\n                                                               return true;\n                                                           }\n                                                   },\n                                     ]\n                             }\n             }\n         });"
            ],
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\rightMenu\\rightMenu.js",
            "line": 97,
            "description": "菜单栏顺序变更\n通过instance.setComponent函数添加",
            "itemtype": "method",
            "name": "order",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "example": [
                "\n         instance.setComponent({\n                           rightMenu: {\n                               order: function (a, b) {\n                                       return a - b;//参考数组排序,穿进来的是add函数中添加的order值\n                               }\n                           }\n                    })"
            ],
            "class": "rightMenu",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 40,
            "description": "调用scene.goCenter()缩放和居中展示",
            "itemtype": "property",
            "name": "居中展示",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 47,
            "description": "调用scene.resize(1)还原比例",
            "itemtype": "property",
            "name": "正常显示",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 54,
            "description": "调用scene.toggleZoom()开启鼠标缩放,操作鼠标滚轮放大和缩小图层",
            "itemtype": "property",
            "name": "鼠标缩放",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 61,
            "description": "调用scene.toggleEagleEye()切换鹰眼",
            "itemtype": "property",
            "name": "鹰眼",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 68,
            "description": "调用scene.getPicture()新窗口打开图层截图",
            "itemtype": "property",
            "name": "导出png",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 82,
            "description": "开启自动布局设置窗口,需要载入windows模块",
            "itemtype": "property",
            "name": "自动布局",
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 116,
            "description": "添加搜索模块",
            "itemtype": "method",
            "name": "addSearch",
            "params": [
                {
                    "name": "searchMode",
                    "description": "搜索模块配置，可为配置集合",
                    "type": "Object|array",
                    "props": [
                        {
                            "name": "name",
                            "description": "显示在选择框中的名称"
                        },
                        {
                            "name": "type",
                            "description": "唯一标识"
                        },
                        {
                            "name": "selected",
                            "description": "是否初始被选中",
                            "optional": true
                        },
                        {
                            "name": "search",
                            "description": "回车或点击搜索按钮时的事件处理,传入的参数为Input的输入值，返回参数content属性为结果面板中展示的内容",
                            "optional": true
                        },
                        {
                            "name": "hideResult",
                            "description": "是否启用结果面板",
                            "optional": true
                        },
                        {
                            "name": "clickResult",
                            "description": "结果面板被选中后的事件处理,传入的参数为search的结果",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     instance.setComponent({\n                   toolBar: {\n                       addSearch:[\n                           {   //自定义的搜索配置，该搜索不调用预定义的任何事件\n                               //自定义了额外面板展示,工具条上条目仅用来触发额外的搜索面板\n                               type:\"deviceType\",\n                               name:\"设备型号\",\n                               hideResult:true\n                           },\n                           {//默认的搜索模块配置,可以初始化时 hideDefaultSearch: true禁止加载\n                              type: \"value\",\n                              name: \"default\",\n                              hideResult: false,\n                              search: function (val) {//val值为Input内容\n                                  return scene.find(val, \"node\")\n                                      .map(function (i) {\n                                          return {\n                                              content: i.attr.name,//该属性用以展示文字\n                                              target: i //自定义\n                                          }\n                                      });\n                              },\n                              clickResult: function (result) {\n                                  if (result.target) {//此处target为search结果中设置，content属性被用以展示文字\n                                      scene.moveToNode(result.target);\n                                  }\n                              }\n                          }\n                       ]"
            ],
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\toolBar\\toolBar.js",
            "line": 158,
            "description": "配置点击保存按钮时事件处理,重复设置会替换上次设置\n\n默认动作为序列化当前图层信息并打开新页面展示",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "example": [
                "\n      instance.setComponent({\n                   toolBar: {\n                        save: function (e) {//e事件对象\n                               ...\n                        }\n                   }\n            })"
            ],
            "class": "toolBar",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\confirm.js",
            "line": 10,
            "description": "确认弹出框",
            "itemtype": "method",
            "name": "confirm",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "窗口的标题",
                            "type": "Html",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "窗口的提示内容",
                            "type": "Html",
                            "optional": true
                        },
                        {
                            "name": "ok",
                            "description": "确认后的处理函数",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "cancel",
                            "description": "取消后的处理函数",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "width",
                            "description": "窗口宽度",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     instance.open('confirm',{\n         title:\"确认操作\",\n         content:\"确认操作?\",\n         width:200,\n         ok:function(){\n             console.info('ok');\n         },\n         cancel:function(){\n             console.info('cancel');\n         }\n     });"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\imageSelect.js",
            "line": 11,
            "description": "开启图片选择框,无参\n\n需初始化组件模块后配置图片数组,配置参考样例",
            "itemtype": "method",
            "name": "imageSelect",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数,无参数则只开启不设置",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "images",
                            "description": "窗口内应用的图片集合,不设置则沿用上次设置",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "isSet",
                            "description": "确认是打开窗口还是设置窗口,为ture则不打开窗口只设置，false或不设则默认开启",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "jquery的延迟执行函数",
                "type": "Deferred"
            },
            "example": [
                "\n     两种设置窗口内容的方式:\n     1.instance.setComponent({\n                   windows: {\n                       images: [\"img/mo/eNodeB.png\", \"img/mo/eNodeB_1.png\", \"img/mo/eNodeB_2.png\", \"img/mo/eNodeB_3.png\", \"img/mo/eNodeB_4.png\"]\n                   }\n            });\n       2.instance.open('imageSelect',{\n               images: [\"img/mo/eNodeB.png\", \"img/mo/eNodeB_1.png\", \"img/mo/eNodeB_2.png\", \"img/mo/eNodeB_3.png\", \"img/mo/eNodeB_4.png\"],\n               isSet:true\n           });\n     instance.open(\"imageSelect\")\n                .then(function(src){\n                   console.info(src);选中的图片\n               });"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\loading.js",
            "line": 10,
            "description": "进度条工具,常用于全局配置ajax执行时显示,ajax结束隐藏",
            "itemtype": "method",
            "name": "loading",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数,未配置时隐藏",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "type",
                            "description": "默认为0,暂时有2种,0和1",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "出现在图上的位置,center,left,right,默认为right",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "logo",
                            "description": "type=0时，图中央的logo图标",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n       $(document)\n               .ajaxStart(function () {\n                       instance.open(\"loading\", {\n                     type:0,\n                       logo: \"img/logo.png\",\n                       postion:\"right\"\n                   });\n               })\n               .ajaxError(function (e) {\n                       console.error(e);\n               })\n               .ajaxStop(function () {\n                       instance.open(\"loading\");\n               })"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\progress.js",
            "line": 10,
            "description": "进度条工具",
            "itemtype": "method",
            "name": "progress",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数,未配置时不显示进度条",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "state",
                            "description": "当前进度,值域0-100(为100时，error未设或为false则延迟1秒后消失,error=true则延迟3秒后消失),未配置时不显示进度条",
                            "type": "Number"
                        },
                        {
                            "name": "info",
                            "description": "进度条小标题内容",
                            "type": "Html",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "是否是错误提示,为true时更改进度条样式",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     instance.open(\"progress\", {state: 100, info: \"<h5>出现错误!</h5>\", error: true});"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\styleSelect.js",
            "line": 10,
            "description": "公用的样式选择窗口",
            "itemtype": "method",
            "name": "styleSelect",
            "params": [
                {
                    "name": "config",
                    "description": "无值则全部展示 ,\n\n键对应窗口中样式的select框或Input框的name属性,值对应input内初始值或select的选中值 :\n\n         支持属性有:\n         width , height , fontSize , namePosition , borderWidth , borderRadius , direction , linkOffset , linkRadius , linkDash , linkGap ,\n         arrowSize , arrowOffset , fontColor , color , borderColor",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "jquery的延迟执行函数,回调函数传入的参数为,根据开启窗口的设置获取相应的值组成的对象",
                "type": "Deferred"
            },
            "example": [
                "\n     instance.open(\"styleSelect\",{\n                   namePosition:\"top\",\n                   width:50,\n                   height:50,\n                   borderColor:\"255,255,255\"\n       })\n           .then(function(op){\n               console.info(op);//若开启时指定namePosition,width,height,borderColor四项，则回调值也是这四项的\n           });"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\tips.js",
            "line": 9,
            "description": "鼠标移动提示框",
            "itemtype": "method",
            "name": "tips",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数",
                    "type": "Object",
                    "props": [
                        {
                            "name": "show",
                            "description": "未配置则认为要关闭该功能,展示面板内的内容,传入的参数为当前鼠标指向的元素",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "description": "指定何时显示,未配置则一直显示,传入的参数为当前鼠标指向的元素",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     两种配置方式,重复设置会替换上次设置\n     1.instance.setComponent({\n               windows: {\n                   tips: {\n                       show: function (target) {\n                           return \"<div>名: \" + target.val(\"name\") + \"</div>\" + \"<div> id: \" + target.val(\"id\") + \"</div>\"\n                       },\n                       filter: function (target) {\n                           return target.getType() == QTopo.constant.NODE;\n                       }\n                   }\n               }\n           });\n       2.instance.open('tips',{\n                   show: function (target) {\n                       return \"<div>名: \" + target.val(\"name\") + \"</div>\" + \"<div> id: \" + target.val(\"id\") + \"</div>\"\n                   },\n                   filter: function (target) {\n                       return target.getType() == QTopo.constant.NODE;\n                   }\n               });\n"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\tools\\view.js",
            "line": 10,
            "description": "信息弹出框",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "窗口的标题",
                            "type": "Html",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "窗口的提示内容",
                            "type": "Html",
                            "optional": true
                        },
                        {
                            "name": "width",
                            "description": "窗口宽度",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n      instance.open('view',{\n          title:\"提示\",\n          content:\"<h1>展示内容</h1>\",\n          width:200\n      });"
            ],
            "class": "windows",
            "module": "component"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 11,
            "description": "根据窗口以及topo包裹外壳的高度确认窗口位置\n\n统一的窗口显示位置",
            "itemtype": "method",
            "name": "defaultPosition",
            "params": [
                {
                    "name": "dom",
                    "description": "topo外层包裹",
                    "type": "Dom"
                },
                {
                    "name": "win",
                    "description": "设定高度的窗口",
                    "type": "Dom"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 25,
            "description": "基于Bootstrap下拉列表的颜色选择框绑定\n\n颜色选择面板应 name=color_palette\n选中值存放在最近的input.color-selected 内",
            "itemtype": "method",
            "name": "initColorSelect",
            "params": [
                {
                    "name": "win",
                    "description": "初始化的窗口的jquery对象",
                    "type": "Dom"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 43,
            "description": "阻止form发送，同时转化为Json操作,对应转化的标签应该有name属性用以指明json的key",
            "itemtype": "method",
            "name": "initFormSubmit",
            "params": [
                {
                    "name": "dom",
                    "description": "form表单的jquery对象",
                    "type": "Dom"
                },
                {
                    "name": "fn",
                    "description": "处理json对象的函数",
                    "type": "Function"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 61,
            "description": "json组装form表单",
            "itemtype": "method",
            "name": "setFormInput",
            "params": [
                {
                    "name": "dom",
                    "description": "form表单的jquery对象",
                    "type": "Dom"
                },
                {
                    "name": "json",
                    "description": "对象中的键对应表单中的name，自动将值赋上",
                    "type": "Object"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 70,
            "description": "初始化一个窗口,定义开关接口，注册窗口互斥，窗口移动",
            "itemtype": "method",
            "name": "initBase",
            "params": [
                {
                    "name": "dom",
                    "description": "topo存在的包裹dom,用以注册包裹空间内窗口移动",
                    "type": "Dom"
                },
                {
                    "name": "win",
                    "description": "需要初始化的窗口的jquery对象",
                    "type": "Dom"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 138,
            "description": "封装统一的jquery-niceScroll插件的设定值",
            "itemtype": "method",
            "name": "addScroll",
            "params": [
                {
                    "name": "win",
                    "description": "需要添加滚动条的窗口"
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\windows\\util.js",
            "line": 156,
            "description": "让子窗口在父窗口的正中",
            "itemtype": "method",
            "name": "makeCenter",
            "params": [
                {
                    "name": "dom",
                    "description": "父窗口"
                },
                {
                    "name": "win",
                    "description": "子窗口"
                },
                {
                    "name": "fixed",
                    "description": "高宽写定",
                    "props": [
                        {
                            "name": "height",
                            "description": "高",
                            "type": "Number"
                        },
                        {
                            "name": "width",
                            "description": "宽",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "QTopo.windowUtil",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\component.js",
            "line": 16,
            "description": "初始化组件模块,加载组件包后可用",
            "itemtype": "method",
            "name": "initComponent",
            "params": [
                {
                    "name": "instance",
                    "description": "QTopo生成的实例对象",
                    "type": "Instance"
                },
                {
                    "name": "config",
                    "description": "配置参数",
                    "type": "Object",
                    "props": [
                        {
                            "name": "hideMenu",
                            "description": "不载入右键菜单",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "hideToolbar",
                            "description": "不载入工具条",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "hideWindows",
                            "description": "则不载入窗口模块",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "rightMenu",
                            "description": "右键菜单初始化参数",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "filter",
                                    "description": "过滤掉的菜单的集合",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "windows",
                            "description": "窗口管理初始化参数",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "filter",
                                    "description": "过滤掉的窗口的集合",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "toolbar",
                            "description": "工具条初始化参数",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "hideDefaultSearch",
                                    "description": "不加载默认搜索功能",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "实例对象，支持链式调用",
                "type": "Instance"
            },
            "example": [
                "\n     IPOSS = QTopo.init(dom, {\n                       backgroundColor: \"#06243e\"\n               });\n     QTopo.initComponent(IPOSS,\n                       {\n                           rightMenu: {\n                               filter: [\"创建节点\", \"添加链路\", \"删除\", \"编辑\", \"元素切换\", \"分组操作\"]\n                           },\n                           toolBar: {\n                               hideDefaultSearch: true\n                           },\n                           windows:{\n                               filter:[\"link\",\"imageNode\"]\n                           }\n                       }\n               )"
            ],
            "class": "QTopo",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\component.js",
            "line": 64,
            "description": "开启/管理窗口,加载组件包后且组件初始化完毕后可用",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "type",
                    "description": "窗口名",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "窗口配置，窗口不同配置不同，参考component中的windows api",
                    "type": "Object"
                }
            ],
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\component\\component.js",
            "line": 78,
            "description": "随时配置组件属性,加载组件包后且组件初始化完毕后可用",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "config",
                    "description": "详细配置参考组件说明",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolBar",
                            "description": "工具条配置",
                            "type": "Object"
                        },
                        {
                            "name": "rightMenu",
                            "description": "右键菜单配置",
                            "type": "Object"
                        },
                        {
                            "name": "windows",
                            "description": "窗口配置",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 20,
            "description": "记录容器内的元素",
            "itemtype": "property",
            "name": "[C] children",
            "type": "Array",
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 25,
            "description": "记录容器上的链路",
            "itemtype": "property",
            "name": "[C] links",
            "type": "Array",
            "class": "[C] Container",
            "module": "core",
            "subprops": [
                {
                    "name": "in",
                    "description": "以容器为终点的链路"
                },
                {
                    "name": "out",
                    "description": "以容器为起点的链路"
                }
            ]
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 37,
            "description": "设置容器名称",
            "itemtype": "method",
            "name": "[C] setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 50,
            "description": "将元素加入容器内",
            "itemtype": "method",
            "name": "[C] add",
            "params": [
                {
                    "name": "element",
                    "description": "一般为节点类型对象或数组，容器加入容器容易产生Bug",
                    "type": "Element|array"
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 82,
            "description": "将子元素从容器中删除",
            "itemtype": "method",
            "name": "[C] remove",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 96,
            "description": "获取容器基本类型",
            "itemtype": "method",
            "name": "[C] getType",
            "return": {
                "description": "QTopo.constant.CONTAINER"
            },
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 104,
            "description": "设置容器背景色",
            "itemtype": "method",
            "name": "[C] setColor",
            "params": [
                {
                    "name": "color",
                    "description": "\"255,255,255\"/\"#ffffff\"",
                    "type": "String"
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 116,
            "description": "设置容器内子元素一般行为,未完全实现",
            "itemtype": "method",
            "name": "[C] setChildren",
            "params": [
                {
                    "name": "children",
                    "description": "\n         children={\n                 draggable:是否可移动{boolean}\n         }",
                    "type": "Object"
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 136,
            "description": "容器缩放切换,在scene创建时可选是否提供切换\n\n可在创建时增加参数 toggle:{close:true}来创建一个不可切换的容器\n\n若无切换对象，则该方法无动作",
            "itemtype": "method",
            "name": "[C] toggle",
            "params": [
                {
                    "name": "flag",
                    "description": "为true则强制缩放，为false则强制展开，无值则自适应切换,",
                    "optional": true
                }
            ],
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 163,
            "description": "判断元素是否已是子元素",
            "itemtype": "method",
            "name": "[C] isChild",
            "params": [
                {
                    "name": "element",
                    "description": "判断的子元素"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 180,
            "description": "判断元素是否在分组覆盖的范围内,临时元素不考虑",
            "itemtype": "method",
            "name": "[C] isInside",
            "params": [
                {
                    "name": "element",
                    "description": "判断的元素"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Container.js",
            "line": 194,
            "description": "分组属性提取",
            "itemtype": "method",
            "name": "[C] toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "[C] Container",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Group.js",
            "line": 103,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "Group",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Group.js",
            "line": 125,
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "layout",
                    "description": "图片相对路径",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "flow(固定宽高,组员流式布局), grid(固定宽高,组员行列布局), fixed(固定宽高,组员可拖动), default(宽高自适应)",
                            "type": "String"
                        },
                        {
                            "name": "row",
                            "description": "当type=flow时,用以设置水平间隔 ,当type=grid时,用以设置行数",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "column",
                            "description": "当type=flow时,用以设置垂直间隔 ,当type=grid时,用以设置列数",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Group",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\container\\Group.js",
            "line": 170,
            "description": "获取全局设置",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "config  全局配置的克隆对象[只读]，修改该对象不会直接修改全局配置，若要修改全局配置请使用scene.setDefault",
                "type": "Object"
            },
            "example": [
                "\n        默认全局参数:\n            var DEFAULT = {\n                              name: 'group',\n                              font:{\n                                  size:16,\n                                  type:\"微软雅黑\",\n                                  color:'255,255,255'\n                              },\n                              color: '10,10,100',\n                              alpha: 0.5,\n                              draggable: true,\n                              zIndex: 1,\n                              jsonId:\"\",\n                              border:{\n                                  width:0,\n                                  radius:30,\n                                  color:\"255,0,0\"\n                              },\n                              size:[500,500],\n                              position:[0,0],\n                              namePosition: 'bottom',//Bottom_Center Top_Center Middle_Left Middle_Right Hidden,\n                              layout: {\n                                  type:\"default\"\n                              },\n                              children:{//待定设置，未完全实现\n                                  showLink: false,\n                                  showName: true,\n                                  draggable: true\n                              },\n                              useType:QTopo.constant.container.GROUP\n                      };"
            ],
            "class": "Group",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Direct.js",
            "line": 66,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "DirectLine",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Direct.js",
            "line": 87,
            "description": "获取元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n         var DEFAULT = {\n                               number: 1,\n                               alpha: 1,\n                               color: '22,124,255',\n                               arrow: {\n                                   size: 10,\n                                   offset: 0,\n                                   start: false,\n                                   end: false\n                               },\n                               position:{\n                                   start:[0,0],\n                                   end:[0,100]\n                               },\n                               jsonId:\"\",\n                               gap: 20,\n                               width: 3,\n                               dashed: null,\n                               zIndex: 2,\n                               font: {\n                                   size: 16,\n                                   type: \"微软雅黑\",\n                                   color: '255,255,255'\n                               },\n                               expendAble: true,\n                               useType: QTopo.constant.line.DIRECT,\n                               offset: 60\n                           };"
            ],
            "class": "DirectLine",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 19,
            "description": "记录线段的首尾元素,首尾元素一般隐藏，且为jtopo对象，仅作为绘制的坐标点",
            "itemtype": "property",
            "name": "[LE] path",
            "type": "Object",
            "class": "[LE] Line",
            "module": "core",
            "subprops": [
                {
                    "name": "start",
                    "description": "起始元素",
                    "type": "Object"
                },
                {
                    "name": "end",
                    "description": "终点元素",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 31,
            "description": "设置线段位置,原理是设置线段首尾处隐藏jtopo节点的位置",
            "itemtype": "method",
            "name": "[LE] setPosition",
            "params": [
                {
                    "name": "position",
                    "description": "\n\n        position={\n            start:[x,y],\n            end:[x,y]\n        }",
                    "type": "Object"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 55,
            "description": "获取基本类型",
            "itemtype": "method",
            "name": "[LE] getType",
            "return": {
                "description": "QTopo.constant.Line",
                "type": "String"
            },
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 63,
            "description": "设置线段颜色",
            "itemtype": "method",
            "name": "[LE] setColor",
            "params": [
                {
                    "name": "color",
                    "description": "\"255,255,255\"/\"#ffffff\"",
                    "type": "String"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 74,
            "description": "设置线段计数",
            "itemtype": "method",
            "name": "[LE] setNum",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 89,
            "description": "设置线段宽度",
            "itemtype": "method",
            "name": "[LE] setWidth",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 100,
            "description": "设置线段两端箭头参数",
            "itemtype": "method",
            "name": "[LE] setArrow",
            "params": [
                {
                    "name": "arrow",
                    "description": "\n\n        arrow={\n            size:箭头大小{number},\n            offset:箭头在链路上的偏移量{number},\n            start:是否显示起点箭头{boolean},\n            end:是否显示终点箭头{boolean},\n        }",
                    "type": "Object"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 123,
            "description": "设置相同起点和终点的链路之间的间隔大小",
            "itemtype": "method",
            "name": "[LE] setGap",
            "params": [
                {
                    "name": "gap",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 135,
            "description": "设置链路的虚线线段长度\n\n设置不为number类型或小于0时，则认为不要虚线",
            "itemtype": "method",
            "name": "[LE] setDashed",
            "params": [
                {
                    "name": "dashedPattern",
                    "description": "",
                    "type": "Number|null"
                }
            ],
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\line\\Line.js",
            "line": 151,
            "description": "单个对象的属性提取",
            "itemtype": "method",
            "name": "[LE] toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "[LE] Line",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Curve.js",
            "line": 63,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "CurveLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Curve.js",
            "line": 85,
            "description": "获取元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n         var DEFAULT = {\n                               number: 1,\n                               alpha: 1,\n                               color: '22,124,255',\n                               arrow: {\n                                   size: 10,\n                                   offset: 0,\n                                   start: false,\n                                   end: false\n                               },\n                               jsonId:\"\",\n                               gap: 20,\n                               width: 2,\n                               dashed: null,\n                               zIndex: 2,\n                               font: {\n                                   size: 16,\n                                   type: \"微软雅黑\",\n                                   color: '255,255,255'\n                               },\n                               useType: QTopo.constant.link.CURVE,\n                               offset: 200\n                           };"
            ],
            "class": "CurveLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Direct.js",
            "line": 65,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "DirectLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Direct.js",
            "line": 86,
            "description": "获取元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n         var DEFAULT = {\n                               number: 1,\n                               alpha: 1,\n                               color: '22,124,255',\n                               arrow: {\n                                   size: 10,\n                                   offset: 0,\n                                   start: false,\n                                   end: false\n                               },\n                               jsonId:\"\",\n                               gap: 20,\n                               width: 3,\n                               dashed: null,\n                               zIndex: 2,\n                               font: {\n                                   size: 16,\n                                   type: \"微软雅黑\",\n                                   color: '255,255,255'\n                               },\n                               expendAble: true,\n                               useType: QTopo.constant.link.DIRECT,\n                               offset: 60\n                           };"
            ],
            "class": "DirectLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Direct.js",
            "line": 117,
            "description": "开启链路展开模式,为链路生成toggle函数",
            "itemtype": "method",
            "name": "openToggle",
            "params": [
                {
                    "name": "scene",
                    "description": "链路所在图层",
                    "type": "Scene"
                }
            ],
            "class": "DirectLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Direct.js",
            "line": 125,
            "description": "链路展开/合并切换",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "flag",
                    "description": "为true则展开为false则缩放，无值则根据现状自适应切换,",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "DirectLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Flexional.js",
            "line": 64,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "FlexionalLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Flexional.js",
            "line": 85,
            "description": "设置折线方向",
            "itemtype": "method",
            "name": "setDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "horizontal 水平 \"vertical\"垂直",
                    "type": "String"
                }
            ],
            "class": "FlexionalLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Flexional.js",
            "line": 98,
            "description": "设置折角弧度",
            "itemtype": "method",
            "name": "setRadius",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "FlexionalLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Flexional.js",
            "line": 115,
            "description": "获取元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n        var DEFAULT = {\n                           number: 1,\n                           alpha: 1,\n                           color: '22,124,255',\n                           arrow: {\n                               size: 10,\n                               offset: 0,\n                               start: false,\n                               end: false\n                           },\n                           jsonId:\"\",\n                           radius: 0,\n                           gap: 20,\n                           width: 2,\n                           dashed: null,\n                           zIndex: 2,\n                           font: {\n                               size: 16,\n                               type: \"微软雅黑\",\n                               color: '255,255,255'\n                           },\n                           useType: QTopo.constant.link.FLEXIONAL,\n                           direction: \"horizontal\",\n                           offset: 60//两端折线线段的长度\n                       };"
            ],
            "class": "FlexionalLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Fold.js",
            "line": 64,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "FoldLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Fold.js",
            "line": 86,
            "description": "设置折线方向",
            "itemtype": "method",
            "name": "setDirection",
            "params": [
                {
                    "name": "direction",
                    "description": "/horizontal 水平 \"vertical\"垂直",
                    "type": "String"
                }
            ],
            "class": "FoldLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Fold.js",
            "line": 98,
            "description": "获取元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n       var DEFAULT ={\n                           number:1,\n                           alpha:1,\n                           color: '22,124,255',\n                           arrow:{\n                               size:10,\n                               offset:0,\n                               start:false,\n                               end:false\n                           },\n                           jsonId:\"\",\n                           gap:20,\n                           width: 2,\n                           dashed:  null,\n                           zIndex : 100,\n                           radius:0,\n                           font:{\n                               size:16,\n                               type:\"微软雅黑\",\n                               color:'255,255,255'\n                           },\n                           useType: QTopo.constant.link.FOLD,\n                           direction:\"vertical\"\n                   };"
            ],
            "class": "FoldLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Fold.js",
            "line": 129,
            "description": "设置折角弧度",
            "itemtype": "method",
            "name": "setRadius",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "FoldLink",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 19,
            "description": "记录链路的首尾元素",
            "itemtype": "property",
            "name": "[L] path",
            "type": "Object",
            "class": "[L] Link",
            "module": "core",
            "subprops": [
                {
                    "name": "start",
                    "description": "起始元素",
                    "type": "Object"
                },
                {
                    "name": "end",
                    "description": "终点元素",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 42,
            "description": "获取元素基本类型,详细参考QTopo.constant中的类型定义",
            "itemtype": "method",
            "name": "[L] getType",
            "return": {
                "description": "QTopo.constant.LINK"
            },
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 50,
            "description": "设置颜色",
            "itemtype": "method",
            "name": "[L] setColor",
            "params": [
                {
                    "name": "color",
                    "description": "\"255,255,255\"/\"#ffffff\"",
                    "type": "String"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 61,
            "description": "计数设置\n\n计数大于1时在链路上显示(+number)\n\nQTopo.constant.link.DIRECT类型的链路可以基于此数展开",
            "itemtype": "method",
            "name": "[L] setNumber",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 82,
            "description": "设置链路宽度,小于0则默认为1",
            "itemtype": "method",
            "name": "[L] setWidth",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 94,
            "description": "设置链路两端的箭头属性",
            "itemtype": "method",
            "name": "[L] setArrow",
            "params": [
                {
                    "name": "arrow",
                    "description": "\n\n        arrow={\n            size:箭头大小{number},\n            offset:箭头在链路上的偏移量{number},\n            start:是否显示起点箭头{boolean},\n            end:是否显示终点箭头{boolean},\n        }",
                    "type": "Object"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 131,
            "description": "设置相同起点和终点的链路之间的间隔大小\n\n常用于设置QTopo.constant.link.DIRECT类型的链路展开时,其子链路之间的间距大小",
            "itemtype": "method",
            "name": "[L] setGap",
            "params": [
                {
                    "name": "gap",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 144,
            "description": "折线类链路两端的偏移线段长度，或曲线相对中轴线的偏移量",
            "itemtype": "method",
            "name": "setOffset",
            "params": [
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 156,
            "description": "设置链路的虚线线段长度\n\n设置不为number类型或小于0时，则认为不要虚线",
            "itemtype": "method",
            "name": "[L] setDashed",
            "params": [
                {
                    "name": "dashedPattern",
                    "description": "[虚线长度,虚线间隔]",
                    "type": "Array"
                }
            ],
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\link\\Link.js",
            "line": 174,
            "description": "单个对象的属性提取",
            "itemtype": "method",
            "name": "[L] toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "[L] Link",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Image.js",
            "line": 68,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "ImageNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Image.js",
            "line": 91,
            "description": "设置节点图片,与setColor冲突，设了图片则颜色无效\n\n未设置图片则显示方形节点，内部填充颜色",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "image",
                    "description": "图片相对路径",
                    "type": "String"
                }
            ],
            "class": "ImageNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Image.js",
            "line": 104,
            "description": "获取全局设置",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "config  全局配置的克隆对象[只读]，修改该对象不会直接修改全局配置，若要修改全局配置请使用scene.setDefault",
                "type": "Object"
            },
            "example": [
                "\n        默认全局参数:\n            var DEFAULT= {\n                      image: \"\",\n                      size: [60, 60],\n                      name: \"node\",\n                      alpha: 1,\n                      position: [0, 0],\n                      font: {\n                          size: 16,\n                          type: '微软雅黑',\n                          color: \"255,255,255\"\n                      },\n                      jsonId:\"\",\n                      border:{\n                          width:0,\n                          radius:0,\n                          color:\"255,0,0\"\n                      },\n                      zIndex: 3,\n                      color: JTopo.util.randomColor(),\n                      namePosition: 'bottom',\n                      useType: QTopo.constant.node.IMAGE,\n                      alarm: {\n                          show: false,\n                          text: \"\",\n                          color: \"255,255,255\",\n                          font: {\n                              size: 16,\n                              type: \"微软雅黑\"\n                          }\n                      }\n                  };"
            ],
            "class": "ImageNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Image.js",
            "line": 144,
            "description": "设置告警\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "setAlarm",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n        config={\n            show: 是否显示告警{boolean},\n              text: 节点右上角告警板中内容,可为空{string},\n              color: 告警颜色{string} \"255,255,255\"/\"#ffffff\",\n              font: {\n                  size: 告警字体大小{number},\n                  type: 告警字体类型{string} 如\"微软雅黑\"\n              }\n        }"
            ],
            "class": "ImageNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 20,
            "description": "链接记录",
            "itemtype": "property",
            "name": "[N] links",
            "type": "Object",
            "class": "[N] Node",
            "module": "core",
            "subprops": [
                {
                    "name": "in",
                    "description": "自身为终点的链路对象",
                    "type": "Array"
                },
                {
                    "name": "out",
                    "description": "自身为起点的链路对象",
                    "type": "Array"
                }
            ]
        },
        {
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 32,
            "description": "获取元素基本类型,详细参考QTopo.constant中的类型定义",
            "itemtype": "method",
            "name": "[N] getType",
            "return": {
                "description": "QTopo.constant.NODE"
            },
            "class": "[N] Node",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 40,
            "description": "设置颜色,一般为设置自身填充颜色，节点有图片设置或为文字节点时无效",
            "itemtype": "method",
            "name": "[N] setColor",
            "params": [
                {
                    "name": "color",
                    "description": "\"255,255,255\"/\"#ffffff\"",
                    "type": "String"
                }
            ],
            "class": "[N] Node",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 52,
            "description": "设置显示名称,删减首尾空格符\n\n文字节点应调用setText处理文字显示\n\n其他节点应用该函数处理名称，否则会出现隐藏后再显示而名称不符的Bug",
            "itemtype": "method",
            "name": "[N] setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "[N] Node",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Node.js",
            "line": 69,
            "description": "单个对象的属性提取",
            "itemtype": "method",
            "name": "[N] toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "[N] Node",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Shape.js",
            "line": 57,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "ShapeNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Shape.js",
            "line": 81,
            "description": "获取全局设置",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "config  全局配置的克隆对象[只读]，修改该对象不会直接修改全局配置，若要修改全局配置请使用scene.setDefault",
                "type": "Object"
            },
            "example": [
                "\n        默认全局参数:\n            var DEFAULT= {\n                      image: \"\",\n                      size: [200, 100],\n                      name: \"node\",\n                      alpha: 1,\n                      position: [0, 0],\n                      font: {\n                          size: 16,\n                          type: '微软雅黑',\n                          color: \"255,255,255\"\n                      },\n                      jsonId:\"\",\n                      border:{\n                          width:0,\n                          radius:0,\n                          color:\"255,0,0\"\n                      },\n                      zIndex: 3,\n                      color: JTopo.util.randomColor(),\n                      namePosition: 'bottom',\n                      useType: QTopo.constant.node.IMAGE,\n                      alarm: {\n                          show: false,\n                          text: \"\",\n                          color: \"255,255,255\",\n                          font: {\n                              size: 16,\n                              type: \"微软雅黑\"\n                          }\n                      }\n                  };"
            ],
            "class": "ShapeNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Text.js",
            "line": 52,
            "description": "元素对属性的统一设置函数，推荐使用\n\n参数可设置一项或多项,未设置部分参考全局配置\n\n若传入参数的text未配置，则显示为  \"not set text\"",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n        实际参数参考attr内属性,只会修改有对应set函数的属性,若新增属性且添加了setXXX函数，也可用此函数配置\n        如:name 对应 setName(\"..\")\n        参数格式如下\n        config={\n            xx:...,\n            xx:...\n        }"
            ],
            "class": "initTextNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\node\\Text.js",
            "line": 79,
            "description": "获取全局设置",
            "itemtype": "method",
            "name": "getDefault",
            "return": {
                "description": "config  全局配置的克隆对象[只读]，修改该对象不会直接修改全局配置，若要修改全局配置请使用scene.setDefault",
                "type": "Object"
            },
            "example": [
                "\n        默认全局参数:\n            var DEFAULT = {\n                  position: [0, 0],\n                  font: {\n                      size: 16,\n                      type: '微软雅黑',\n                      color: \"255,255,255\"\n                  },\n                  jsonId:\"\",\n                  border: {\n                      width: 0,\n                      radius: 0,//最大160 最小0\n                      color: \"255,0,0\"\n                  },\n                  zIndex: 3,\n                  alpha: 1,\n                  text: 'no text here',\n                  useType: QTopo.constant.node.TEXT\n              };"
            ],
            "class": "initTextNode",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 13,
            "description": "核心Jtopo对象",
            "itemtype": "property",
            "name": "[E] jtopo",
            "type": "Object",
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 23,
            "description": "预定义的额外属性,参考实际元素",
            "itemtype": "property",
            "name": "[E] extra",
            "type": "Object",
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 28,
            "description": "预定义的基本属性，参考实际元素",
            "itemtype": "property",
            "name": "[E] attr",
            "type": "Object",
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 33,
            "description": "设置jsonId",
            "itemtype": "method",
            "name": "[E] setJsonId",
            "params": [
                {
                    "name": "id",
                    "description": "id",
                    "type": "String"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 41,
            "description": "显示元素",
            "itemtype": "method",
            "name": "[E] show",
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 57,
            "description": "隐藏元素",
            "itemtype": "method",
            "name": "[E] hide",
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 73,
            "description": "设置使用类型",
            "itemtype": "method",
            "name": "[E] setUseType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 81,
            "description": "获取使用类型",
            "itemtype": "method",
            "name": "[E] getUseType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 89,
            "description": "设置元素文本",
            "itemtype": "method",
            "name": "[E] setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 100,
            "description": "设置元素边框",
            "itemtype": "method",
            "name": "[E] setBorder",
            "params": [
                {
                    "name": "border",
                    "description": "\ncolor:颜色,width:宽度,radius:角弧度",
                    "type": "Object"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 121,
            "description": "绑定事件,可用off删除对应事件",
            "itemtype": "method",
            "name": "[E] on",
            "params": [
                {
                    "name": "name",
                    "description": "事件名\n\nclick,dbclick,mousedown,mouseup,mouseover,mouseout,mousemove,mousedrag,mousewheel,touchstart,touchmove,touchend,keydown,keyup",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "处理函数",
                    "type": "Function"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 139,
            "description": "解除事件，可删除on绑定的事件",
            "itemtype": "method",
            "name": "[E] off",
            "params": [
                {
                    "name": "name",
                    "description": "事件名\n\nclick,dbclick,mousedown,mouseup,mouseover,mouseout,mousemove,mousedrag,mousewheel,touchstart,touchmove,touchend,keydown,keyup",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "处理的函数对象，若无参则删除该事件下所有函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 151,
            "description": "设置元素层级",
            "itemtype": "method",
            "name": "[E] setZIndex",
            "params": [
                {
                    "name": "zIndex",
                    "description": "值高的元素覆盖在值低的元素上,默认节点>链接>分组",
                    "type": "Number"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 162,
            "description": "设置元素字体",
            "itemtype": "method",
            "name": "[E] setFont",
            "params": [
                {
                    "name": "font",
                    "description": "\n\ntype:字体,\ncolor:颜色,\nsize:大小",
                    "type": "Object"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 190,
            "description": "设置元素透明度",
            "itemtype": "method",
            "name": "[E] setAlpha",
            "params": [
                {
                    "name": "alpha",
                    "description": "值域0-1",
                    "type": "Number"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 203,
            "description": "设置元素位置",
            "itemtype": "method",
            "name": "[E] setPosition",
            "params": [
                {
                    "name": "position",
                    "description": "[x,y]在图层上的坐标",
                    "type": "Array"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 215,
            "description": "设置元素大小",
            "itemtype": "method",
            "name": "[E] setSize",
            "params": [
                {
                    "name": "size",
                    "description": "[width,height]",
                    "type": "Array"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 228,
            "description": "元素是否锁定位置",
            "itemtype": "method",
            "name": "[E] setDraggable",
            "params": [
                {
                    "name": "draggable",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 239,
            "description": "设置元素文字位置",
            "itemtype": "method",
            "name": "[E] setNamePosition",
            "params": [
                {
                    "name": "namePosition",
                    "description": "无参则设为bottom\n\nhide,bottom,top,left,right,center",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 284,
            "description": "私有函数,设置元素属性,只要有对应函数则传入参数设置,不应直接调用\n\n实际元素中应重写set函数，在set函数中对特殊参数做处理后再调用该函数",
            "itemtype": "method",
            "name": "[E] _setAttr",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 304,
            "description": "获取元素基本属性",
            "itemtype": "method",
            "name": "[E] get",
            "params": [
                {
                    "name": "name",
                    "description": "属性名",
                    "type": "String"
                }
            ],
            "example": [
                "\n         Element.setPosition([100,100])\n         Element.get('position')       //[100,100]"
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 315,
            "description": "获取元素的属性,修改/赋值元素额外属性",
            "itemtype": "method",
            "name": "[E] val",
            "params": [
                {
                    "name": "key",
                    "description": "属性名\n\n 要操作的属性名,与get不同，该函数会在整个对象中查找与key匹配的属性\n\n 无论是额外属性还是基本属性又或是Element.xx属性，只要匹配成功即返回.\n\n 优先级为 额外属性>基本属性>Element.xx属性\n\n 用该函数赋予额外属性时，可以直接传入一个对象作为参数\n\n 该函数会遍历该参数对象将其内容全部覆盖到额外属性上",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "值,无参则为取值",
                    "type": "String|object|void",
                    "optional": true
                }
            ],
            "example": [
                "\n\n      赋值操作   1. Element.val('pid','12345')\n                 2. Element.val({\n                         pid:\"12345\",\n                         path:[]\n                     })\n      取属性操作 Element.val('pid')       //\"12345\"\n                 Element.val('position') //[x,y]\n                 Element.val('path')       //[]\n                 Element.val('name')       //\"\""
            ],
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\element\\Element.js",
            "line": 407,
            "description": "获取元素中心坐标",
            "itemtype": "method",
            "name": "[E] getCenterPosition",
            "return": {
                "description": "{x,y}",
                "type": "Object"
            },
            "class": "[E] Element",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\stage\\event.js",
            "line": 1,
            "description": "Created by qiyc on 2017/4/18.",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\tools\\api.js",
            "line": 1,
            "description": "绘制园角矩形",
            "params": [
                {
                    "name": "x",
                    "description": "左上角坐标点x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "左上角坐标点y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "矩形宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "矩形高度",
                    "type": "Number"
                },
                {
                    "name": "borderRadius",
                    "description": "圆角弧度",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\tools\\api.js",
            "line": 24,
            "description": "绘制椭圆",
            "params": [
                {
                    "name": "x",
                    "description": "圆心坐标x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "圆心坐标y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "椭圆宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "椭圆高度",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\tools\\api.js",
            "line": 40,
            "description": "画五角星",
            "params": [
                {
                    "name": "x",
                    "description": "圆心坐标x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "圆心坐标y",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "五角星外半径",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\tools\\layout.js",
            "line": 156,
            "description": "找到可以作为根的节点",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\jtopo\\main.js",
            "line": 1,
            "description": "Created by qiyc on 2017/4/12.",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 42,
            "description": "核心Jtopo对象",
            "itemtype": "property",
            "name": "jtopo",
            "type": "Object",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 48,
            "description": "图层中有效记录的元素",
            "itemtype": "property",
            "name": "children",
            "type": "Object",
            "class": "Scene",
            "module": "core",
            "subprops": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "container",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "line",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 62,
            "description": "图层的主要属性",
            "itemtype": "property",
            "name": "attr",
            "type": "Objcet",
            "class": "Scene",
            "module": "core",
            "subprops": [
                {
                    "name": "mode",
                    "description": "",
                    "optional": true,
                    "optdefault": "QTopo.constant.mode.NORMAL"
                },
                {
                    "name": "backgroundImage",
                    "description": "",
                    "optional": true,
                    "optdefault": "''"
                },
                {
                    "name": "backgroundColor",
                    "description": "",
                    "optional": true,
                    "optdefault": "''"
                }
            ]
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 70,
            "description": "图层的额外属性",
            "itemtype": "property",
            "name": "extra",
            "type": "Objcet",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 93,
            "description": "获取图层的基本属性",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "要获取的属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "属性值",
                "type": "String|object"
            },
            "example": [
                "\n        scene.get('mode')       //\"normal\""
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 104,
            "description": "获取图层的属性,或添加/修改额外属性",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "key",
                    "description": "\n\n要操作的属性名,与get不同，该函数会在整个对象中查找与key匹配的属性\n无论是额外属性还是基本属性又或是Scene.xx属性，只要匹配成功即返回.\n优先级为 额外属性>基本属性>Scene.xx属性\n\n用该函数赋予额外属性时，可以直接传入一个对象作为参数\n该函数会遍历该参数对象将其内容全部覆盖到额外属性上",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "属性值，若无则函数为获取属性，若有则为修改/添加属性",
                    "type": "String|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|object|void"
            },
            "example": [
                "\n\n     赋值操作   1. scene.val('pid','12345')\n                2. scene.val({\n                        pid:\"12345\",\n                        path:[]\n                    })\n     取属性操作 scene.val('pid')       //\"12345\"\n                scene.val('position') //undefined\n                scene.val('path')       //[]\n                scene.val('mode')       //\"normal\""
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 152,
            "description": "配置图层中元素全局样式",
            "itemtype": "method",
            "name": "setDefault",
            "params": [
                {
                    "name": "type",
                    "description": "要配置的元素类型 例：QTopo.constant.node.IMAGE",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "样式属性，可参考对应的元素attr属性",
                    "type": "Object"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 189,
            "description": "获取图层中元素全局样式",
            "itemtype": "method",
            "name": "getDefault",
            "params": [
                {
                    "name": "type",
                    "description": "要配置的元素类型 例：QTopo.constant.node.IMAGE",
                    "type": "String"
                }
            ],
            "return": {
                "description": "样式属性，可参考对应的元素attr属性",
                "type": "Object"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 228,
            "description": "设置图层背景图片，与setBackgroundColor冲突",
            "itemtype": "method",
            "name": "setBackgroundImage",
            "params": [
                {
                    "name": "image",
                    "description": "图片url",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 237,
            "description": "设置图层背景颜色，与setBackgroundImage冲突",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "#xxxxxx/255,255,255",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 247,
            "description": "设置图层模式",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "例:QTopo.constant.mode.NORMAL",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 260,
            "description": "图层清空，清除图层内所有元素",
            "itemtype": "method",
            "name": "clear",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 274,
            "description": "获取类型，常用在右键菜单上对触发对象的识别",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "QTopo.constant.SCENE"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 282,
            "description": "获取使用类型，常用在右键菜单上对触发对象的识别",
            "itemtype": "method",
            "name": "getUseType",
            "return": {
                "description": "QTopo.constant.SCENE"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 290,
            "description": "绑定事件，可用off删除对应事件",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "事件名\n\nclick,dbclick,mousedown,mouseup,mouseover,mouseout,mousemove,mousedrag,mousewheel,touchstart,touchmove,touchend,keydown,keyup",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "处理函数",
                    "type": "Function"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 302,
            "description": "删除事件，可删除on绑定的事件",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "事件名\n\nclick,dbclick,mousedown,mouseup,mouseover,mouseout,mousemove,mousedrag,mousewheel,touchstart,touchmove,touchend,keydown,keyup",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "处理的函数对象，若无参则删除该事件下所有函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 314,
            "description": "根据搜索当前图层，查找基本属性或额外属性满足条件的元素",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "scan",
                    "description": "查询条件,格式为\"key=value,key=value\",多个条件用,分割",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "可指定元素类型精确查找",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回数组，数组成员为满足至少一个条件的元素",
                "type": "Array"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 372,
            "description": "获取当前图层在正常视角下(未放大缩小)最左上角的坐标",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "包含 x,y属性",
                "type": "Object"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 398,
            "description": "根据配置在当前图层上绘制节点",
            "itemtype": "method",
            "name": "createNode",
            "params": [
                {
                    "name": "config",
                    "description": "\n\n无参则根据全局配置绘制QTopo.constant.node.IMAGE对应的节点,\n\nconfig.type可指定绘制节点类型\n\n参考QTopo.contant.node选择可绘制的种类",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "创建成功返回节点对象，失败返回false",
                "type": "Node|boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 433,
            "description": "根据配置在两个元素之间绘制新的链接",
            "itemtype": "method",
            "name": "createLink",
            "params": [
                {
                    "name": "config",
                    "description": "\n无参则根据全局配置绘制QTopo.constant.link.DIRECT对应的链接,\n\nconfig.type可指定绘制链接类型\n\n参考QTopo.contant.link选择可绘制的种类",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "创建成功返回链接对象，失败返回false",
                "type": "Link|boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 471,
            "description": "根据配置在两个元素之间创建链接,若两元素已有链接则原链接计数上加1,\n可操作于有展开功能的链接上，可自适应选择添加新链接或计数+1",
            "itemtype": "method",
            "name": "addLink",
            "params": [
                {
                    "name": "config",
                    "description": "创建新链接时所依赖的配置，可参考createLink函数",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "判断两元素间无链接时的可选操作，若无则调用createLink函数建立链接",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "创建成功返回链接对象，失败返回false",
                "type": "Link|boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 513,
            "description": "获取两元素之间所有的链接",
            "itemtype": "method",
            "name": "linksBetween",
            "params": [
                {
                    "name": "start",
                    "description": "元素，起始无关",
                    "type": "Element"
                },
                {
                    "name": "end",
                    "description": "元素，起始无关",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "元素间的链接集合，按链接的计数右大到小排列",
                "type": "Array"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 544,
            "description": "在图层上绘制不可以移动的线元素",
            "itemtype": "method",
            "name": "createLine",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数,若无则按全局配置创建",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "创建成功返回线元素，失败返回false",
                "type": "Line|boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 569,
            "description": "在图层上绘制分组元素",
            "itemtype": "method",
            "name": "createContainer",
            "params": [
                {
                    "name": "config",
                    "description": "配置参数,若无则按全局配置创建",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "创建成功返回线元素，失败返回false",
                "type": "Container|boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 611,
            "description": "删除图层内元素,元素删除其上的链接也会删除和更新",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 727,
            "description": "图层信息转化为json",
            "itemtype": "method",
            "name": "toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 738,
            "description": "判断元素是否在当前图层内",
            "itemtype": "method",
            "name": "isChildren",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 757,
            "description": "图层缩放,元素一屏显示",
            "itemtype": "method",
            "name": "goCenter",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 767,
            "description": "图层缩放",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "size",
                    "description": "根据比例放大或缩小 参数可 0-1缩小 1-n放大",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 779,
            "description": "启用/禁用鼠标缩放",
            "itemtype": "method",
            "name": "toggleZoom",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 791,
            "description": "启用/禁用鹰眼",
            "itemtype": "method",
            "name": "toggleEagleEye",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 799,
            "description": "获取当前图层的png格式图片在新的窗口打开",
            "itemtype": "method",
            "name": "getPicture",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 816,
            "description": "切换元素的层次",
            "itemtype": "method",
            "name": "toggleZIndex",
            "params": [
                {
                    "name": "element",
                    "description": "待控制元素"
                },
                {
                    "name": "flag",
                    "description": "true为降低false为提升，无参则默认提升，若已提升到最高则降至最低",
                    "optional": true
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 854,
            "description": "获取被选中的元素",
            "itemtype": "method",
            "name": "getSelected",
            "return": {
                "description": "返回图层中被选中的元素",
                "type": "Array"
            },
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 876,
            "description": "高亮目标隐藏其他",
            "itemtype": "method",
            "name": "toggleLight",
            "params": [
                {
                    "name": "target",
                    "description": "数组或对象,高亮其相关对象,无参则全部高亮",
                    "optional": true
                },
                {
                    "name": "flag",
                    "description": "若为true则只高亮传入的对象,不选则只对传入对象相关的对象高亮",
                    "optional": true
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 943,
            "description": "正常尺寸展示，并将视角移动到以参数节点为中心的位置",
            "itemtype": "method",
            "name": "moveToNode",
            "params": [
                {
                    "name": "node",
                    "description": "节点对象"
                }
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\Scene.js",
            "line": 971,
            "description": "自动布局",
            "itemtype": "method",
            "name": "autoLayout",
            "params": [
                {
                    "name": "config",
                    "description": "自动布局配置参数"
                }
            ],
            "example": [
                "\n     参数配置:\n         config:{\n             type:\n                 1.'round'   无需其他配置\n                 2.'default' 需配置行数，列间距，行间距\n             rows:行数\n             rowSpace:行间距\n             columnSpace:列间距\n         }"
            ],
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\core\\events.js",
            "line": 9,
            "description": "在图层上双击时\n\n目标是分组,则分组可进行缩放和还原\n\n目标为链路,QTopo.constant.link.DIRECT类型的链路计数大于1时可展开和合并",
            "itemtype": "event",
            "name": "dbclick",
            "class": "Scene",
            "module": "core"
        },
        {
            "file": "develop\\constant.js",
            "line": 8,
            "description": "定义的通用常量,一般用getType()来区分元素基本类型,getUseType()区分元素具体类型",
            "itemtype": "property",
            "name": "constant",
            "type": "Object",
            "example": [
                "\n     if(node.getType()==QTopo.constant.NODE){.....}\n     if(node.getUseType()!=QTopo.constant.CASUAL){.....}\n     if(node.getUseType()==QTopo.constant.node.IMAGE){.....}"
            ],
            "class": "QTopo",
            "module": "QTopo",
            "subprops": [
                {
                    "name": "SCENE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CONTAINER",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "LINK",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "LINE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "NODE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CASUAL",
                    "description": "临时元素，用以元素变换收缩等操作的过渡元素,一般不对其做操作",
                    "type": "String"
                },
                {
                    "name": "node.IMAGE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "node.TEXT",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "node.SHAPE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "container.GROUP",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "link.CURVE",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "link.DIRECT",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "link.FLEXIONAL",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "link.FOLD",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "line.DIRECT",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode.NORMAL",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode.EDIT",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode.DRAG",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode.SELECT",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        {
            "file": "develop\\main.js",
            "line": 15,
            "description": "存放当前页面中所初始化的topo实例",
            "itemtype": "property",
            "name": "instance",
            "type": "Array",
            "class": "QTopo",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 20,
            "description": "一系列工具函数,详细内容参考 QTopo.util",
            "itemtype": "property",
            "name": "util",
            "type": "Object",
            "class": "QTopo",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 26,
            "description": "可开启或屏蔽控制台日志,对应用QTopo.util.info以及QTopo.util.error函数输出的日志",
            "itemtype": "property",
            "name": "log",
            "type": "Object",
            "class": "QTopo",
            "module": "QTopo",
            "subprops": [
                {
                    "name": "error",
                    "description": "默认为true,开启",
                    "type": "Boolean"
                },
                {
                    "name": "info",
                    "description": "默认为true,开启",
                    "type": "Boolean"
                }
            ]
        },
        {
            "file": "develop\\main.js",
            "line": 39,
            "description": "初始化Qtopo实例,创建并将其保存在QTopo.instance数组内,实例api参考QTopo.instance",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "dom",
                    "description": "指定初始化所在的dom,若是数组则自动取第一个",
                    "type": "Document"
                },
                {
                    "name": "config",
                    "description": "配置参数,配置内容为图层scene配置(参考scene配置)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "[instance] QTopo实例对象，QTopo.instance"
            },
            "example": [
                "\n     IPOSS = QTopo.init(\n          document.getElementsByClassName(\"topo_base\")[0],\n         {\n             backgroundColor: \"#06243e\",//基本属性配置背景色\n             path:[] //自定义属性,插入到图层对象scene的额外属性中\n         }\n     );"
            ],
            "class": "QTopo",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 63,
            "description": "topo实例化的图层对象",
            "itemtype": "property",
            "name": "scene",
            "type": "Object",
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 69,
            "description": "topo实例所在dom",
            "itemtype": "property",
            "name": "document",
            "type": "Document",
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 82,
            "description": "图层绘制主函数\n\n可以随时使用setOption生成一个或多个元素,或配置告警，也可以一次性全局配置\n\n相关的全局样式请参考各元素自身的attr属性,或通过 元素的getDefault() / scene.getDefault(type)来获取对应元素的全局样式\n\n前端绘图过程可以用工具栏和右键菜单绘制完成后,配合实例的toJson函数取得图层数据,(实例通过QTopo.init初始化且保存在QTopo.instance数组内)\n\n直接将返回对象的option属性传入setOption可复制绘图\n\n每个元素配置的data数组内成员的属性可以是样式也可以是额外属性,自适应取值配置，过滤的额外属性自动分配到元素的extra属性中保存,可以通过node.val('id')的形式获取\n\n和样式重名的额外属性可以放在extra中，extra中的属性将默认全部覆盖到元素的extra属性内",
            "itemtype": "method",
            "name": "setOption",
            "params": [
                {
                    "name": "option",
                    "description": "配置属性,参数可以是instance.toJson().option对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "node",
                            "description": "创建node元素",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "style",
                                    "description": "设定全局的节点样式，未配置样式的节点会采用默认样式",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "细则看示例",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "container",
                            "description": "创建container元素",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "style",
                                    "description": "设定全局的分组样式，未配置样式的分组会采用默认样式",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "findChildren",
                                    "description": "通知分组通过什么属性去查找成员",
                                    "type": "String"
                                },
                                {
                                    "name": "data",
                                    "description": "细则看示例",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "link",
                            "description": "创建link元素",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "style",
                                    "description": "设定全局的分组样式，未配置样式的分组会采用默认样式",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "path",
                                    "description": "通知链接通过什么属性去查找起始点和终点,数组参数可以为1个或2个，当设置为2个时，通过不同属性查找起始点和终点",
                                    "type": "Array"
                                },
                                {
                                    "name": "data",
                                    "description": "细则看示例",
                                    "type": "Array"
                                }
                            ]
                        },
                        {
                            "name": "line",
                            "description": "创建line元素",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "alarm",
                            "description": "配置告警",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "node",
                                    "description": "通知告警模块如何查找需要设定告警的节点,现只支持节点上的告警",
                                    "type": "String"
                                },
                                {
                                    "name": "animate",
                                    "description": "配置告警动画,包含2个属性 ：\n                    1. time:{number}设定间隔时间,单位为毫秒 ,\n                    2. callBack:{function}回调函数,参数为当前处理告警的节点",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "告警设置,包含3个属性 ：\n                    1. color {string}:告警展示的颜色,255,255,255/#ffffff ,\n                    2. node {string}:对应告警属性下的node为键,此处为值来查找对应的节点 ,\n                    3. [text] {string}:告警显示的文字信息，可不设或为空 ,",
                                    "type": "Array"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "clear",
                    "description": "是否清空图层，默认不清除",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "instance\n QTopo实例自身,用以链式操作"
            },
            "example": [
                "\n      topo.setOption({\n               node: {\n                   style:{//全局样式\n                       size:[60,60],\n                       image: \"img/node.png\"\n                   },\n                   data: [{\n                           position:[-200,-200],\n                           size:[100,100],\n                           id:1111,\n                           name:\"测试1\\nhhhh\" //\\n为名称换行\n                          },\n                          {\n                           position:[0,0],\n                           size:[100,100],\n                           id:2222,\n                           name:\"测试2\\nhhhh\" //\n                          }]\n               },\n               container: {\n                   style:{\n                       color:\"#165782\",\n                       alpha:0.3,\n                       border:{\n                           radius:10\n                       },\n                       namePosition:\"top\"\n                   },\n                   findChildren: \"id\",//这个决定了 每个分组根据data中的数据查找该加入的子,该属性应在node中的value中有配置\n                   data: [{\n                           size:[400,400],\n                           position:[0,0],\n                           layout:{\n                               type:\"fixed\"//布局为固定\n                           },\n                           children: childrenData,\n                           toggle:{ //分组切换的节点样式\n                               image: \"img/node.png\"\n                           }\n                         //  findChildren: \"id\", 当然也可以针对某个分组单独设置其查找子元素的标记\n                           children:[\"1111\",\"2222\"]//findChildren定义为id ，此处就该是对应元素的id属性\n                       }]\n               },\n               link: {\n                   style:{\n                       color:\"#00FFFF\"\n                   },\n                   path: [\"id\"],   //决定了线的起始节点由什么属性决定,数组长度为1则起始节点按统一属性查找，可分别设不同，0为起始节点属性.1为终点,该属性应在node中的value中有配置\n                   data: [{\n                               start:1111,//path指明起始点和终点都是找id属性，那此处就是起点的id\n                               end:2222,   //终点的id\n                               width:10,   //样式配置，详细参考对应元素的属性\n                               radius:25,\n                               arrow:{\n                                   end:true,\n                                   start:true,\n                                   size:10\n                               },\n                               extra:{\n                                   type:1  //额外属性，因与下述链路类型的名称一致，移直extra内赋值到生成的链路extra上,可通过link.val('type')取到\n                               },\n                               type:QTopo.constant.link.FLEXIONAL //建立的链路类型\n                           }]\n               },\n               alarm: {\n                   node: \"alarmId\",    //指明节点上对应的查找属性,该属性应在node中的value中有配置,暂只支持节点告警\n                   data: [],\n                   animate:{   //可设置动画，每个点亮之间延迟多少毫秒，回调函数中能获取到点亮的节点信息\n                       time:1000,\n                       callBack:function(node){\n                           console.info(node)\n                       }\n                   }\n               }\n           })"
            ],
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 220,
            "description": "实例自适应大小",
            "itemtype": "method",
            "name": "resize",
            "return": {
                "description": "instance QTopo实例自身,用以链式操作"
            },
            "example": [
                "\n     $(window).resize(function () {\n         IPOSS.resize();\n     });"
            ],
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\main.js",
            "line": 236,
            "description": "当前图层数据转化为json结构",
            "itemtype": "method",
            "name": "toJson",
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n       var IPOSS=QTopo.instance[0];\n       var json=IPOSS.toJson();    //json={\n                                   //         init:图层参数,scene对象的参数配置,\n                                   //         option:图层内所有对象的属性提取，可直接用于setOption还原,其中jsonId用做每个元素的唯一标识\n                                   //      }\n       IPOSS.setOption(json.option,true);"
            ],
            "class": "QTopo.instance",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 18,
            "description": "给函数添加缓存机制",
            "itemtype": "method",
            "name": "cached",
            "params": [
                {
                    "name": "fn",
                    "description": "需处理的函数",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "处理过的函数",
                "type": "Function"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 25,
            "description": "字符串转化json",
            "itemtype": "method",
            "name": "toJson",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "json对象",
                "type": "Json"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 37,
            "description": "首字母大写",
            "itemtype": "method",
            "name": "upFirst",
            "params": [
                {
                    "name": "string",
                    "description": "字符串"
                }
            ],
            "return": {
                "description": "首字母大写的字符串",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 46,
            "description": "对象深度合并，只继承原对象有的属性",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "base",
                    "description": "原对象"
                },
                {
                    "name": "config",
                    "description": "合并对象"
                }
            ],
            "return": {
                "description": "处理完的原对象",
                "type": "Object"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 82,
            "description": "获取浏览器连接上的参数",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "param",
                    "description": "参数名"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 100,
            "description": "仅画布全屏展示",
            "itemtype": "method",
            "name": "runPrefixMethod",
            "params": [
                {
                    "name": "element",
                    "description": "例:canvas",
                    "type": "Document"
                },
                {
                    "name": "method",
                    "description": "\"RequestFullScreen\"全屏的模式",
                    "type": "String"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 125,
            "description": "浏览器全屏展示",
            "itemtype": "method",
            "name": "launchFullScreen",
            "params": [
                {
                    "name": "element",
                    "description": "例:document.documentElement",
                    "type": "Document"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 141,
            "description": "关闭浏览器全屏",
            "itemtype": "method",
            "name": "exitFullScreen",
            "params": [
                {
                    "name": "document",
                    "description": "例:window.document",
                    "type": "Document"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 155,
            "description": "颜色字符串转换成rgb 16进制",
            "itemtype": "method",
            "name": "transHex",
            "params": [
                {
                    "name": "color",
                    "description": "例:\"#asdd00\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "16进制 例:\"255,255,255\"",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 172,
            "description": "数组添加元素,如果数组中不存在则存入，否则不做操作",
            "itemtype": "method",
            "name": "arrayPush",
            "params": [
                {
                    "name": "arr",
                    "description": "操作的数组"
                },
                {
                    "name": "value",
                    "description": "操作的元素"
                }
            ],
            "return": {
                "description": "操作是否成功",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 186,
            "description": "数组删除元素,如果数组中不存在则删除，否则不做操作",
            "itemtype": "method",
            "name": "arrayDelete",
            "params": [
                {
                    "name": "arr",
                    "description": "操作的数组"
                },
                {
                    "name": "value",
                    "description": "操作的元素"
                }
            ],
            "return": {
                "description": "操作是否成功",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 201,
            "description": "构造类继承关系",
            "itemtype": "method",
            "name": "inherits",
            "params": [
                {
                    "name": "childClazz",
                    "description": "子类",
                    "type": "Function"
                },
                {
                    "name": "FatherClazz",
                    "description": "父类",
                    "type": "Function"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 221,
            "description": "深度克隆对象",
            "itemtype": "method",
            "name": "deepClone",
            "params": [
                {
                    "name": "obj",
                    "description": "待克隆对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "克隆后的新对象",
                "type": "Object"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 249,
            "description": "获取对象的类",
            "itemtype": "method",
            "name": "getClass",
            "params": [
                {
                    "name": "o",
                    "description": "待处理对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "类名，如\"Object\",\"Array\"",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 260,
            "description": "加入时间戳的信息日志",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "Arguments"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 270,
            "description": "加入时间戳的错误日志",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "Arguments"
                }
            ],
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 280,
            "description": "格式化Date对象",
            "itemtype": "method",
            "name": "dateFormat",
            "params": [
                {
                    "name": "date",
                    "description": "Date对象",
                    "type": "Date"
                },
                {
                    "name": "ftString",
                    "description": "格式化字符串,如\"hh:mm:ss\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 316,
            "description": "构造唯一Id字符串",
            "itemtype": "method",
            "name": "makeId",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 324,
            "description": "判断对象是否是元素",
            "itemtype": "method",
            "name": "isElement",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 333,
            "description": "判断QTopo对象是否是图层",
            "itemtype": "method",
            "name": "isScene",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 342,
            "description": "判断QTopo对象是否是节点",
            "itemtype": "method",
            "name": "isNode",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 351,
            "description": "判断QTopo对象是否是分组",
            "itemtype": "method",
            "name": "isContainer",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        },
        {
            "file": "develop\\util.js",
            "line": 360,
            "description": "判断QTopo对象是否是链接",
            "itemtype": "method",
            "name": "isLink",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "QTopo.util",
            "module": "QTopo"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\core\\Scene.js:93"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\core\\Scene.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\main.js:39"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\main.js:82"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\main.js:220"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\main.js:236"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\util.js:18"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\util.js:25"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\util.js:37"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\util.js:46"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " develop\\util.js:82"
        },
        {
            "message": "Missing item type\nCreated by qiyc on 2017/4/18.",
            "line": " develop\\core\\jtopo\\stage\\event.js:1"
        },
        {
            "message": "Missing item type\n绘制园角矩形",
            "line": " develop\\core\\jtopo\\tools\\api.js:1"
        },
        {
            "message": "Missing item type\n绘制椭圆",
            "line": " develop\\core\\jtopo\\tools\\api.js:24"
        },
        {
            "message": "Missing item type\n画五角星",
            "line": " develop\\core\\jtopo\\tools\\api.js:40"
        },
        {
            "message": "Missing item type\n找到可以作为根的节点",
            "line": " develop\\core\\jtopo\\tools\\layout.js:156"
        },
        {
            "message": "Missing item type\nCreated by qiyc on 2017/4/12.",
            "line": " develop\\core\\jtopo\\main.js:1"
        }
    ]
}